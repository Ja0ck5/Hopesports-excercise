<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- memcached configuration -->
	<bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
		<!-- 将自己的引用以构造的形式注入到自己类当中 -->
		<constructor-arg>
			<value>sockIOPool</value>	
		</constructor-arg>
	</bean>
	
	<!-- 配置 Memcached 连接池 
		配置工厂方法进行实例化	factory-method="getInstance"
		生命开始，初始化方法         init-method="initialize"
		销毁方法			 destroy-method="shutDown"
	-->
	<bean id="sockIOPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize"  destroy-method="shutDown">
		<!-- 将自己的引用以构造的形式注入到自己类当中 -->
		<constructor-arg>
			<value>sockIOPool</value>	
		</constructor-arg>
		
		<!-- 配置缓存服务器 -->
		<property name="servers">
			<list>
			<!-- 配置集群则配置多个value -->
				<value>192.168.137.131:11211</value>
			</list>
		</property>
		
		<!-- 配置权重 -->
		<property name="weights">
			<list>
				<!-- 位置对应配置的  servers -->
				<value>1</value>
			</list>
		</property>
	
	</bean>

	
	<!-- 切面对象  aspect object -->
	<bean id="memCachedInterceptor" class="cn.lyj.common.web.aop.MemCachedInterceptor">
		<property name="expiry" value="420000"/>
	</bean>
	<!-- Spring AOP  get* 配置环绕 -->
	<aop:config>
		<!-- 面 -->
		<aop:aspect ref="memCachedInterceptor">
			<!-- 点  环绕-->
			<aop:around method="doAround" pointcut="execution(* cn.lyj.core.service.*.*.get*(..))"/>
			<!--数据变更  -->			
			<aop:after method="doAfter" pointcut="execution(* cn.lyj.core.service.*.*.add*(..))"/>
			<aop:after method="doAfter" pointcut="execution(* cn.lyj.core.service.*.*.update*(..))"/>
			<aop:after method="doAfter" pointcut="execution(* cn.lyj.core.service.*.*.delete*(..))"/>
		</aop:aspect>	
	</aop:config>
	
</beans>
